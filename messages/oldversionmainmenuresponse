from dotenv import load_dotenv
import os

from loader import bot, dp
from aiogram.types import Message
from aiogram.dispatcher.filters import Text
from menus.main_menu import MAIN_MENU
from menus.profile_menu import PROFILE_MENU, CREATE_NEW_MENU
from menus.search_menu import SEARCH_MENU, ALARM_MENU, LIKE_MENU
from database.db_control import DatabaseControl, DatabaseConnection
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from messages.cache_storage import CacheStorage


load_dotenv()
HOST, DATABASE, USER, PASSWORD = os.getenv("HOST"), os.getenv("DATABASE"), os.getenv("USER"), os.getenv("PASSWORD")


_storage = CacheStorage()
_conn = DatabaseConnection(host=HOST, database=DATABASE, user=USER, password=PASSWORD).connect()
_base = DatabaseControl(_conn)


class Search(StatesGroup):
    search = State()


async def show_profile(message: Message):
    chat_id = message.from_user.id
    print('checcadadssda')

    if message.text == "My profile 👤":
        current = _base.get_user(message.from_user.id)

        if current is not None:
            await message.answer(text="Here's your form:", reply_markup=PROFILE_MENU)
            await bot.send_photo(caption=f'{current[4]}, {current[7]}\n🌐 {current[2]}\n\n〰️〰️〰️〰️〰️〰️〰️〰️\n"{current[6]}"\n〰️〰️〰️〰️〰️〰️〰️〰️',
                                 photo=current[1],
                                 reply_markup=PROFILE_MENU,
                                 chat_id=message.from_user.id)
        else:
            await message.answer(text="You have no form ❌\nBut you still might create one", reply_markup=CREATE_NEW_MENU)

    elif message.text == "Back to main menu 🔙":
        await message.answer(text="Turning you back", reply_markup=MAIN_MENU)
        try:
            await _storage.delete_user(chat_id=chat_id)
        except Exception as _ex:
            pass
#####################################
    elif message.text in ("Search 🔎", "Who's this?", "dislike", "like", "Ok"):
        print('it is inside of the search!')
        if message.text in ["dislike", "like"]:
            await message.answer(text="form expired", reply_markup=MAIN_MENU)
            print('it came here and checking')
        try:
            await _storage.delete_user(chat_id=chat_id)
        except Exception as ex:
            print(f"No user has been found {ex}")
            pass

        # await Search.search.set()
        params = _base.get_user(chat_id)
        print(1)
        # print(params)
        try:
            search_forms = _base.searchUser(params[0], params[2], params[7], params[5], params[3])
            print(2)
            print(search_forms)
            await Search.search.set()
            like_forms = _base.liked(chat_id)
            likes = []

            for i in like_forms:
                likes.append(_base.get_user(i))
            mutual_forms = _base.get_mutual(chat_id)
            mutual = []

            for i in mutual_forms:
                mutual.append(_base.get_user(i))
            print(likes)
            print(mutual)
            await _storage.add(chat_id=message.from_user.id, forms=search_forms, likes=likes, mutual=mutual)
            await bot.send_message(text="Remember people can impersonate others!", reply_markup=ALARM_MENU, chat_id=message.from_user.id)
        except Exception as ex:
            await bot.send_message(text=f"There are not an account found, Please create an account: \n👉 Click the My Profile section",
                                   chat_id=message.from_user.id)
            print(f"Need to create account: {ex}")
############################################################

async def forming(user, chat_id, reply_markup=SEARCH_MENU):
    await bot.send_photo(caption=f'{user[4]}, {user[7]}\n🌐 {user[2]}\n\n〰️〰️〰️〰️〰️〰️〰️〰️\n"{user[6]}"\n〰️〰️〰️〰️〰️〰️〰️〰️',
                         photo=user[1],
                         chat_id=chat_id,
                         reply_markup=reply_markup)

async def mutual(user, chat_id, reply_markup=SEARCH_MENU):
    await bot.send_photo(caption=f'{user[4]}, {user[7]}\n🌐 {user[2]}\nMutual sympathy, link ---> 💓[MATCHED](tg://user?id={user[0]})💓\n\n〰️〰️〰️〰️〰️〰️〰️〰️\n"{user[6]}"\n〰️〰️〰️〰️〰️〰️〰️〰️',
                         parse_mode="Markdown",
                         photo=user[1],
                         chat_id=chat_id,
                         reply_markup=reply_markup)


async def search(message: Message, state: FSMContext):
    user = await _storage.get_user(chat_id=message.from_user.id)
    # if user == {}:
    #     await message.answer(text="Fill your form before entering a search tab", reply_markup=MAIN_MENU)

    if message.text == "Back to main menu 🔙":
        await state.finish()
        await message.answer(text="Turning you back", reply_markup=MAIN_MENU)
    #############################################
    elif message.text in ["like", "dislike"]:
        print('it is here inside of the like function')
        if message.text == "like":
            print(user["likes"])
            print(user["likes"] != [])
            if user["likes"] != []:
                _base.set_mutual(liker=user["likes"][0][0], liked=message.from_user.id)
                await bot.send_message(chat_id=user["likes"][0][0], reply_markup=LIKE_MENU,
                                       text="Someone is interested in you...")

                await mutual(user=user["likes"][0], chat_id=message.from_user.id, reply_markup=None)
                await _storage.delete_position(chat_id=message.from_user.id, dictionary="likes")
            else:
                print(message.from_user.id,'----',user["forms"][0][0])
                _base.like(liker=message.from_user.id, liked=user["forms"][0][0])
                await bot.send_message(chat_id=user["forms"][0][0], reply_markup=LIKE_MENU,
                                       text="Someone is interested in you...")
                await _storage.delete_position(chat_id=message.from_user.id, dictionary="forms")
                print(user)
        else:
            print(user)
            try:
                print(user["likes"], 'likes')
                if (user["likes"] !=[] and user["forms"] !=[]) or (user["likes"] !=[] and user["forms"] ==[]):
                    _base.dislike(disliker=message.from_user.id, disliked=user["likes"][0][0])
                    _base.delete_liker(liker=user["likes"][0][0], liked=message.from_user.id)
                    await _storage.delete_position(chat_id=message.from_user.id, dictionary="likes")
                    user = await _storage.get_user(chat_id=message.from_user.id)
                    print(user)
                else:
                    _base.dislike(disliker=message.from_user.id, disliked=user["forms"][0][0])
                    _base.delete_liker(liker=user["forms"][0][0], liked=message.from_user.id)
                    await _storage.delete_position(chat_id=message.from_user.id, dictionary="forms")
                    user = await _storage.get_user(chat_id=message.from_user.id)
                    print(user)
                    print('hey')
            except:
                print(user["forms"],'forms')


        try:

            if user["likes"] != []:
                print(user["likes"][0])
                await message.answer(text=f'Your form liked by: {user["likes"][0][4]}❤️')
                print('cas of this function')
                await forming(user["likes"][0], chat_id=message.from_user.id)
            else:
                await forming(user["forms"][0], chat_id=message.from_user.id)
        except Exception as _ex:
            await message.answer("Unfortunately here's no one... Come back later", reply_markup=MAIN_MENU)
            print('it came here')
            await state.finish()


############################################################till  here

    elif message.text in ["Who's this?", "Ok"]:
        print('this okay ')
        print(user["likes"])
        print(user["mutual"])
        if user["likes"] != []:
            await message.answer(text=f'Your form liked by: {user["likes"][0][4]}❤️')
            await forming(user["likes"][0], message.from_user.id)


        elif user["likes"] == [] and user["mutual"] != []:
            for i in user["mutual"]:
                print('it is: ',i)
                print('it is undername: ',user['mutual'][0][0])
                await mutual(user=i, chat_id=message.from_user.id)
                # _base.delete_sympathy(liked=message.from_user.id, liker=i[0])
            try:
                await forming(user["forms"][0], message.from_user.id)
            except:
                await message.answer("Unfortunately here's no one... Come back later", reply_markup=MAIN_MENU)
                await state.finish()
            print('worked this part ')
        else:
            if user["forms"] == []:
                await message.answer("Unfortunately here's no one... Come back later", reply_markup=MAIN_MENU)
                await state.finish()
            else:
                try:
                    await forming(user["forms"][0], message.from_user.id)
                except:
                    await message.answer("Unfortunately here's no one... Come back later", reply_markup=MAIN_MENU)
                    print('it came here')
                    await state.finish()

#################################

def main_menu_response_handler():
    dp.register_message_handler(show_profile, Text(equals=[
        "My profile 👤", "Back to main menu 🔙", "Search 🔎", "Who's this?", "dislike", "like", "Ok"
    ], ignore_case=False), state=None)
    dp.register_message_handler(search, content_types=["any"], state=Search.search)
